#!/usr/bin/env python
# coding: utf-8

import os,sys
import lhapdf
import numpy as np
import matplotlib.pyplot as py
from matplotlib import gridspec
from  matplotlib import rc
rc('font',**{'family':'sans-serif','sans-serif':['Helvetica']})
rc('text',usetex=True)
from pylab import *
import scipy
from scipy.integrate import dblquad

print("\n *********************************************************")
print("      Charm asymmetry                               ")
print(" ***********************************************************\n")


q = 1.65 # GeV
stringQ=r'$Q=1.65~{\rm GeV}$'
filelabel='charm-q1p65gev-nnpdf31-electron'
nx = 1000
xmin = 1e-2
xmax= 1.0
# Reduce verbosity of LHAPDF
lhapdf.setVerbosity(0)
# max number of replicas
nrepmax=100
# number of flavours to be plotted
nfl=1
# Set x grid
X = np.logspace(log(xmin),log(xmax),nx)
# number of pdf sets
nset=2

nrep=np.zeros(nset, dtype='int')
nrep_max = 100

# Read the weights
weights_31_electron = np.array([4.20959881738763e-11, 4.464387872762778e-15, 3.1710968727146294, 5.001055598481901e-40, 1.9233942360058736, 0.00522789677087585, 1.9381615486918123e-22, 6.948282303461209e-24, 0.06077148947256093, 0.02717385269034323, 2.7237343721995346e-07, 6.863857770437248e-08, 0.43768685340824637, 4.1745073051576e-56, 2.1674571660035514e-15, 0.0019915940908779625, 1.7514222525832988e-19, 1.56326409800828e-07, 2.99190186192526e-56, 6.345200573203433, 2.431594158442075e-72, 1.4876699734956801e-170, 1.0398008089287094e-28, 0.0795695277747303, 6.2966481209422165e-59, 8.266158483455245, 7.729730861058763e-11, 2.5349671453327466e-07, 7.3220973698555865, 0.05385970028056135, 3.9746962420487293, 5.4610775493535926e-08, 4.799952740474192e-09, 9.005135679581303e-17, 0.004779185280047421, 1.2188576570720227e-89, 0.08015797401432266, 2.673495381955513e-49, 1.4748764295804374e-54, 0.0413821314569009, 5.423206610433918e-26, 2.6072926891915743e-74, 0.3941385012788396, 1.0340939078530515e-69, 2.1442787185174665e-24, 4.74158005792525e-26, 5.609637823505153, 2.1392949939154007e-28, 2.013309843721551e-12, 0.022065932719304307, 2.9751983232020177e-17, 4.3592296923194025e-07, 0.0003895547202838083, 1.2813193941409293e-180, 1.8898708875105342e-08, 1.4826239836861598e-33, 1.3871613281381383e-116, 0.0, 8.72768736314932e-34, 1.7490925716947977e-123, 6.815676196382348, 4.673600067043014e-21, 0.0, 5.8300490016459126, 7.111216628408524, 2.1175426478333522e-44, 1.4045438863414828, 1.2308862814967925, 0.4863808327603043, 4.844882729083789, 9.753122227482136e-39, 1.0919961285872696e-10, 0.026631523859397675, 0.10380861410599444, 0.014768734579598864, 7.39147817289468e-35, 3.260880607408281e-05, 1.3250863804661024e-144, 3.7915201995068145e-37, 6.782391495693524e-08, 0.0002041913500827248, 0.0019915940908779625, 9.539232006441736, 0.0021576736648114066, 4.332549527854453e-05, 5.530851694716551e-12, 3.1590279147376088e-27, 5.734348239464141e-26, 4.6137199966092865e-07, 9.768635107801382, 3.548206954550099e-69, 0.06833888681115605, 8.511266347478142e-37, 9.594516110871194, 5.322736088990339, 3.942276229475236e-123, 8.770779990212123e-26, 0.011790387766815947, 2.3744309148936213e-40, 1.648933560894321e-34])

# nnpdf31, tau neutrinos
weights_31_tau = np.array([2.6743391850704793e-67, 0.0, 2.0255588414814334e-06, 1.1064364488658024e-99, 2.1706632366549285e-45, 0.031511017080590155, 1.376407723323171e-98, 3.660996161685792e-57, 4.957341838137163e-24, 1.3084349321886307e-26, 1.489734730327625, 4.873772273971302e-124, 8.835509054016927e-23, 1.3497551317509164e-258, 8.377055262641496e-67, 1.1396720235037495e-18, 3.761442893363939e-139, 6.783861303826899e-19, 0.0, 1.5747958270197647e-14, 0.0, 0.0, 3.09336095081712e-66, 5.738122031825971e-66, 0.0, 10.940987995854181, 8.366715938234986e-49, 4.6029533214648595e-06, 1.4192759085773508, 9.58502188191414e-37, 9.542514575254236e-10, 0.002822386353711274, 9.342164831519658e-71, 3.7053503974172687e-51, 3.198527117071317e-17, 4.206748343598233e-200, 1.4838399065082114e-08, 5.5554457309449296e-242, 0.0, 3.53011220560107e-23, 0.0, 4.887315200271543e-220, 2.5406434031042864e-18, 0.0, 3.185658251028913e-23, 0.0002161111021683746, 37.33447786052173, 1.6074463429309132e-76, 3.437656528547257e-165, 4.650834720834313, 4.97873939542187e-64, 2.639766886258485e-30, 3.727829866589191e-23, 0.0, 1.7057273426559085, 3.6763606638251976e-180, 0.0, 0.0, 0.0002747326784590095, 0.0, 2.9457262348578997e-08, 8.291646654764914e-167, 0.0, 3.052511988013082e-48, 0.0, 0.0, 0.00023005923237822738, 9.046328827499824e-89, 1.067202236555535e-09, 1.00134558393683e-10, 0.0, 1.0710394132235657e-33, 9.157134559101278e-51, 1.1747797683825353e-09, 7.574460957792039e-30, 7.700048320670808e-122, 4.16086031515143e-32, 0.0, 1.6121447432215606e-53, 6.039897965329943e-55, 3.0978168889736074e-09, 1.1396720235037495e-18, 7.959347433411242e-23, 2.1110503280993698e-10, 7.545484883407074e-11, 2.234176686312769e-23, 1.7499813592702797e-40, 6.325494778752926e-19, 5.584633802665282e-26, 8.006219965626228e-23, 5.340256601308175e-86, 3.4969457502037543e-129, 7.079341145306868e-55, 8.683416078508265e-09, 0.1439738014806797, 0.0, 42.27992664512891, 8.663823917716265e-85, 3.191681404584306e-269, 1.5594026516920226e-114])

# nnpdf40, electron neutrinos
weights_40_electron = np.array([0.0009316853277358539, 0.0020684821009590904, 0.00012995503790010632, 10.428988792839675, 0.07118118535565314, 0.0037949804907440586, 1.3166120278812564e-05, 0.12538155829830974, 2.913400928814421, 0.001980881227806723, 0.40907075826846584, 0.0003011705164234126, 0.001251757552211289, 0.0172836750938352, 0.009591013700884233, 0.06570840278299754, 2.2007787154580512e-05, 0.06532575235959776, 3.610981361943141e-05, 0.001972255436405609, 0.19408297967136853, 8.67824023422882e-06, 0.0005554554099791631, 0.8999849316340797, 7.25118300000929e-05, 0.0005794996777939384, 0.0007686665816908034, 0.3851868938758993, 0.555357620560115, 1.4393055621264416e-05, 0.3047004512796142, 4.9452529211979394e-06, 0.017724167311626002, 0.0024363763076758077, 0.1505783054443301, 0.0002510483472887864, 2.1316875891473868, 0.060490851316496404, 9.793826618914684, 0.15079035926807766, 0.010278428700049346, 2.045959020933576, 0.0008093801436636149, 7.021157872751468, 1.377460010518111, 0.0017083211949078796, 0.15018195142892535, 0.004360073923697807, 7.158337398603176e-06, 0.00866400683234633, 28.109847457109733, 5.6298160648593104e-05, 0.4348947439655486, 0.00038741724351035433, 0.31800124248900696, 0.0010791265831727873, 2.5635014833142895, 0.0710806684537754, 2.6650608412951534e-05, 0.00277008631415013, 0.22376472919939674, 0.004079208869304759, 0.011081712571742197, 0.20088290537761005, 0.6958326061103924, 2.1316875891473868, 2.240768359204043e-05, 9.040970993289178e-06, 0.0007871092584359243, 3.7188674511979563, 2.66942315448829e-06, 0.14445467890757094, 0.0027599889598906146, 0.027990920621277185, 1.6008688592622788, 0.47811236209391617, 2.9168282993642042e-05, 2.4946631842441596e-05, 9.276767377790634e-06, 0.012466518443886576, 0.0010116197024404622, 0.07113182643236961, 0.0001777382354438946, 0.005148549108233813, 0.016740396943044453, 0.007908170303553631, 3.885679313562638, 2.403647184672493e-07, 0.00022763124817625922, 0.028328993238278182, 2.6350925812227884e-06, 0.0228093742388267, 8.649077395991533e-05, 0.01865982229936361, 0.00014901806711928499, 14.208462164259029, 0.004430333585100129, 2.291453797061768e-05, 0.016868511748696455, 1.568651845419107])

# nnpdf40, tau neutrinos
weights_40_tau = np.array([1.551732030045718e-06, 2.0457653688155073e-06, 1.9093155666777434e-07, 0.3497718663115312, 7.168883221040452e-05, 0.0006790616035585446, 2.1387821993812623e-06, 2.2552409926257856e-05, 0.003735447247708807, 0.00019054709147082072, 6.825756515762449e-06, 2.118454204423396e-05, 3.148302856746469e-05, 0.033708237252660936, 6.908978255381265e-06, 0.02063664028599584, 3.010234437323973e-05, 0.0001678728410373344, 3.4068180363204346e-06, 7.410558828664136e-06, 1.1683166429779648, 4.0679451420373577e-05, 7.464468953764708e-06, 0.12754716279785708, 1.640108610687815e-07, 0.02806391757762364, 1.2632813985455218e-07, 0.004155818150483175, 4.420534077904747, 1.141170389172497e-07, 0.3454937843922338, 4.6834313401430635e-06, 6.689215640548807e-05, 0.00017908314552018137, 8.252116721271424, 6.077452617286093e-07, 0.10574456999163981, 0.21526371388487509, 8.680263760567925, 5.714523745667951, 0.0015098683439670607, 0.0017537147219417518, 4.692135551776838e-05, 0.04234383858568184, 0.004676660653776802, 7.253298797690549e-06, 8.429122322056211e-05, 0.00758874324030607, 1.5610006081913108e-05, 0.06558491660331686, 0.16736195936845458, 1.9243135550382796e-05, 7.019482049239659, 0.0023030634476321893, 0.0019116110381925302, 0.00012998377683002188, 0.020002376719303983, 0.027585645000646128, 6.791121826815443e-06, 0.0033867127066807474, 0.007392862726491192, 8.654453957971415e-06, 0.009515070566579227, 0.11742100443284499, 0.29920441054043095, 0.10574456999163981, 1.9403160760510732e-07, 2.539429197493057e-05, 8.420436302740093e-05, 1.3617997312214605, 2.105421493655422e-05, 0.08540609334401167, 0.14471317520482582, 4.510338086733437e-05, 0.005593301513372539, 1.8251723162379692, 1.3695100362124036e-07, 1.8205639173677665e-06, 4.700936258360183e-05, 2.1883810380215e-05, 0.0007748930058593138, 0.04963878634172202, 1.235085140128951e-07, 0.00017777326814849654, 0.004670510991029022, 0.0030518394959075648, 0.2712419989831693, 2.1512987736610026e-07, 0.004672937441385186, 0.006000127593926643, 3.677439659813788e-07, 0.03116339760546012, 1.1662303726362548e-07, 4.4071469397402405e-07, 0.0038973257703474357, 58.595130182508164, 0.0006443555531539556, 1.1847200763452182e-05, 0.22066743647304218, 0.008815186103048125])


# Check normalisation
sum  =0
for irep in range(nrep_max):
    sum = sum + weights_31_electron[irep]
if(abs(sum - nrep_max) > 1e-5):
    print("weights not normalised")
    exit()

pdfset=["NNPDF31_nnlo_as_0118","NNPDF31_nnlo_as_0118"]
#pdfset=["NNPDF40_nnlo_as_01180","NNPDF40_nnlo_as_01180"]
fit1 = np.zeros((nrep_max,nfl,nx))
fit2 = np.zeros((nrep_max,nfl,nx))

for iset in range(nset):

    p=lhapdf.getPDFSet(pdfset[iset])
    nrep[iset]=int(p.get_entry("NumMembers"))-1
    
    if(iset==0):
        fit1 = np.zeros((nrep[iset],nfl,nx))
    if(iset==1):
        fit2 = np.zeros((nrep[iset],nfl,nx))
 
    print(pdfset[iset])
    print("nrep = ",nrep[iset])

    # Run over replicas
    for i in range(1,nrep[iset]+1):
        p=lhapdf.mkPDF(pdfset[iset],i)
        lhapdf.setVerbosity(0)

        #print("irep = ",i)
        
        # Run over x arrat
        for k in range(nx):
            
            x = X[k]
            q2 = pow(q,2.0)

            # run over flavours
            for ifl in range(nfl):

                if(ifl==0):
                    # total charm
                    if(iset==0):
                        fit1[i-1][ifl][k] = p.xfxQ(4,x,q) + p.xfxQ(-4,x,q) 
                    if(iset==1):
                        fit2[i-1][ifl][k] = p.xfxQ(4,x,q) + p.xfxQ(-4,x,q)
                                                   
                # end run over sets 
print("PDF arrays succesfully filled")

#---------------------------------------------------------------------
# Compute central values and uncertainties
#---------------------------------------------------------------------

p1_high = np.mean(fit1,axis=0) + np.std(fit1,axis=0)
p1_low = np.mean(fit1,axis=0) - np.std(fit1,axis=0)
p1_mid = np.mean(fit1,axis=0)
p1_error= np.std(fit1,axis=0)

p2_high = np.mean(fit2,axis=0) + np.std(fit2,axis=0)
p2_low = np.mean(fit2,axis=0) - np.std(fit2,axis=0)
p2_mid = np.mean(fit2,axis=0)
p2_error= np.std(fit2,axis=0)


# For tests
#weights_40_el=np.zeros(100)
#for irep in range(100):
#  weights_40_el[irep] = 1  
#weights_40_el[0]=90
#weights_40_el[1]=3
#weights_40_el[2]=3
#weights_40_el[3]=3
#weights_40_el[4]=1

cv = np.zeros((nfl,nx))
err = np.zeros((nfl,nx))
for ix in range(nx):
    for ifl in range(nfl):
        cv[ifl][ix] = 0.0
        err[ifl][ix] = 0.0
        for irep in range(100):
        #    print(irep, " ",weights_40_el[irep]," ",fit2[irep][ifl][k])
            cv[ifl][ix] = cv[ifl][ix] + weights_31_electron[irep] * fit2[irep][ifl][ix]/100
            err[ifl][ix] = err[ifl][ix] + weights_31_electron[irep] * pow(fit2[irep][ifl][ix],2.0)/100
        print("err 1 = ",err[ifl][ix])
        err[ifl][ix] = pow( abs( err[ifl][ix] - pow(cv[ifl][ix],2.0)), 0.5)
        print("err final = ",err[ifl][ix])
        #print(ifl," ",ix," ",cv[ifl][ix])
        #print(cv)
        #if(ix>1 and ifl > 0):
        #    exit()

p2_mid = cv
p2_error = err
p2_high = cv + err
p2_low = cv -err

print("\n p1 = ")
print(p1_mid)
print(p1_error)

print("\n p2 = ")
print(p2_mid)
print(p2_error)

#exit()



#---------------------------------------------------------------------
# Plot absolute SFs
#---------------------------------------------------------------------

py.clf()
ncols,nrows=1,1
py.figure(figsize=(ncols*5,nrows*3.5))
gs = gridspec.GridSpec(nrows,ncols)
rescolors = py.rcParams['axes.prop_cycle'].by_key()['color']

# pdflabels
labelpdf=[r"$xc^+(x,Q)$",r"$xd^+(x,Q)$"]

icount=0
for ifl in range(nfl):

    ax = py.subplot(gs[icount])
    p1=ax.plot(X,p1_mid[ifl],ls="solid")
    ax.fill_between(X,p1_high[ifl],p1_low[ifl],color=rescolors[0],alpha=0.2)
    p2=ax.fill(np.NaN,np.NaN,color=rescolors[0],alpha=0.2)

    p3=ax.plot(X,p2_mid[ifl],ls="dashed")
    ax.fill_between(X,p2_high[ifl],p2_low[ifl],color=rescolors[1],alpha=0.2)
    p4=ax.fill(np.NaN,np.NaN,color=rescolors[1],alpha=0.2)

    ax.set_xscale('linear')    
    if(ifl==0):
        ax.set_xlim(xmin,xmax)
    if(ifl==1):
        ax.set_xlim(1e-6,0.1)
    ax.set_yscale('linear')
    if(ifl==0):
        ax.set_ylim(-0.004,0.032)
    if(ifl==1):
        ax.set_ylim(0,5)
    
    ax.tick_params(which='both',direction='in',labelsize=12,right=True)
    ax.tick_params(which='major',length=7)
    ax.tick_params(which='minor',length=4)
    ax.set_ylabel(labelpdf[ifl],fontsize=16)
    ax.set_xlabel(r'$x$',fontsize=18)
    if(ifl==0):
        ax.text(0.04,0.87,stringQ,fontsize=15,transform=ax.transAxes)

    # Add the legend
    if(ifl==0):
        ax.legend([(p1[0],p2[0]),(p3[0],p4[0])],\
#                  [r"${\rm NNPDF3.1}$",\
#                   r"${\rm NNPDF3.1+ FPF}$"], \
                    [r"${\rm NNPDF3.1}$",\
                  r"${\rm NNPDF3.1+ FPF}$"], \
                  frameon=True,loc=1,prop={'size':13})
        
    icount = icount + 1

py.tight_layout(pad=1.4, w_pad=1.0, h_pad=1.0)
py.savefig('FPF-'+filelabel+'.pdf')
print('output plot: FPF-'+filelabel+'.pdf')

exit()




